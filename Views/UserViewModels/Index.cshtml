@model IEnumerable<GreenToys.ViewModel.UserViewModel>
@using GreenToys.Models
@{
    ViewBag.Title = "Index";
}

<h2 style="font-family:cursive;text-transform:capitalize;">Manage User</h2>
<br/>
<div style="float:left;">
    <form method="get" action="/UserViewModels/Index">
        <b>Search by email of customer:</b><br />
        <p>
            <input type="text" value="" name="name" placeholder="Filter By email" autocomplete="off" />
            <input type="submit" value="search" class="btn btn-xs btn-primary" />
        </p>

    </form>
</div>
<br />


<table class="table table-condensed table-hover">
    <tr class="table-header">
        <th>
            @Html.DisplayNameFor(m => m.FirstName)
        </th>

        <th>
            @Html.DisplayNameFor(m => m.LastName)
        </th>

        <th>
            @Html.DisplayNameFor(m => m.Email)
        </th>

        <th>
            @Html.DisplayNameFor(m => m.BirthDate)
        </th>

        <th>
            @Html.DisplayNameFor(m => m.Phone)
        </th>
        <!--disable too bool!-->

        @*<th>
            @Html.DisplayNameFor(m => m.Disable)
        </th>*@
        <th></th>
        <th></th><!--to extend the line above the three buttons (edit,detail...)-->
    </tr>
    <!--we want to run on every item in our model and desplay all the typeoftoy names here-->
    @foreach (var item in Model)
    {

        <tr>
            <td>
                <!--this DisplayFor will display the actual value-->
                @Html.DisplayFor(modelItem => item.FirstName)
            </td>

            <td>                
                @Html.DisplayFor(modelItem => item.LastName)
            </td>

            <td>
                @Html.DisplayFor(modelItem => item.Email)
            </td>

            <td>
                @Html.DisplayFor(modelItem => item.BirthDate)
            </td>

            <td>
                @Html.DisplayFor(modelItem => item.Phone)
            </td>
            <!--add another bool val-->
            @*<td>
                @Html.DisplayFor(modelItem => item.Disable,new { @class="disabled"})
            </td>*@

            <td>
                @Html.Partial("_EditDetailsDeleteButtonPartial", new IndividualButtonPartial { UserID = item.Id })
            </td>
        </tr>
    }

</table>

@*@Html.ActionLink("Edit", "Edit", new { id = item.TypeOfToyID }) |
    @Html.ActionLink("Details", "Details", new { id = item.TypeOfToyID }) |
    @Html.ActionLink("Delete", "Delete", new { id = item.TypeOfToyID })*@


